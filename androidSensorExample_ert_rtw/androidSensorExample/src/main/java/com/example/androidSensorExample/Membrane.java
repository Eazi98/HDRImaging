package com.example.androidSensorExample;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import java.nio.ShortBuffer;

import android.opengl.GLES20;

/**
 * A two-dimensional square for use as a drawn object in OpenGL ES 2.0.
 */
public class Membrane {

    private final String vertexShaderCode =
    // This matrix member variable provides a hook to manipulate
    // the coordinates of the objects that use this vertex shader
    "uniform mat4 uMVPMatrix;" +
    "attribute vec4  vPosition;" +
    "varying vec4 vColor;" +
    "void main() {" +
    "  vColor = vec4(abs(vPosition[0]),abs(vPosition[1]),abs(vPosition[2]+0.3),1.0);" +
    // The matrix must be included as a modifier of gl_Position.
    // Note that the uMVPMatrix factor *must be first* in order
    // for the matrix multiplication product to be correct.
    "  gl_Position = uMVPMatrix * vPosition;" +
    "}";
       
    private final String fragmentShaderCode =
    "precision mediump float;" +
    "varying vec4 vColor;" +
    "void main() {" +
    "  gl_FragColor = vColor;" +
    "}";
    
    private final FloatBuffer vertexBuffer;
    private final ShortBuffer drawListBuffer;
    private final int mProgram;
    private int mPositionHandle;
    private int mColorHandle;
    private int mMVPMatrixHandle;
    
    // number of coordinates per vertex in this array
    static final int COORDS_PER_VERTEX = 3;
    static final int BYTES_PER_FLOAT = 4;
    static float Coords[] = {
-0.500f, -0.500f, -0.167755f,   -0.500f, -0.450f, -0.175221f,   -0.500f, -0.400f, -0.173171f,   -0.500f, -0.350f, -0.161128f,
-0.500f, -0.300f, -0.139423f,   -0.500f, -0.250f, -0.109246f,   -0.500f, -0.200f, -0.072649f,   -0.500f, -0.150f, -0.032471f,
-0.500f, -0.100f,  0.007809f,   -0.500f, -0.050f,  0.044290f,   -0.500f,  0.000f,  0.072959f,   -0.500f,  0.050f,  0.090057f,
-0.500f,  0.100f,  0.092498f,   -0.500f,  0.150f,  0.078277f,   -0.500f,  0.200f,  0.046816f,   -0.500f,  0.250f, -0.000806f,
-0.500f,  0.300f, -0.061792f,   -0.500f,  0.350f, -0.131759f,   -0.500f,  0.400f, -0.205045f,   -0.500f,  0.450f, -0.275189f,
-0.500f,  0.500f, -0.335510f,   -0.450f, -0.500f, -0.099968f,   -0.450f, -0.450f, -0.092546f,   -0.450f, -0.400f, -0.074908f,
-0.450f, -0.350f, -0.046864f,   -0.450f, -0.300f, -0.009052f,   -0.450f, -0.250f,  0.037011f,   -0.450f, -0.200f,  0.088918f,
-0.450f, -0.150f,  0.143432f,   -0.450f, -0.100f,  0.196606f,   -0.450f, -0.050f,  0.243987f,   -0.450f,  0.000f,  0.280922f,
-0.450f,  0.050f,  0.302953f,   -0.450f,  0.100f,  0.306299f,   -0.450f,  0.150f,  0.288357f,   -0.450f,  0.200f,  0.248149f,
-0.450f,  0.250f,  0.186642f,   -0.450f,  0.300f,  0.106857f,   -0.450f,  0.350f,  0.013755f,   -0.450f,  0.400f, -0.086103f,
-0.450f,  0.450f, -0.185093f,   -0.450f,  0.500f, -0.275189f,   -0.400f, -0.500f, -0.031874f,   -0.400f, -0.450f, -0.011195f,
-0.400f, -0.400f,  0.020142f,   -0.400f, -0.350f,  0.062122f,   -0.400f, -0.300f,  0.113919f,   -0.400f, -0.250f,  0.173838f,
-0.400f, -0.200f,  0.239298f,   -0.400f, -0.150f,  0.306853f,   -0.400f, -0.100f,  0.372265f,   -0.400f, -0.050f,  0.430662f,
-0.400f,  0.000f,  0.476797f,   -0.400f,  0.050f,  0.505461f,   -0.400f,  0.100f,  0.512031f,   -0.400f,  0.150f,  0.493096f,
-0.400f,  0.200f,  0.447056f,   -0.400f,  0.250f,  0.374553f,   -0.400f,  0.300f,  0.278660f,   -0.400f,  0.350f,  0.164782f,
-0.400f,  0.400f,  0.040284f,   -0.400f,  0.450f, -0.086103f,   -0.400f,  0.500f, -0.205045f,   -0.350f, -0.500f,  0.029369f,
-0.350f, -0.450f,  0.060619f,   -0.350f, -0.400f,  0.102660f,   -0.350f, -0.350f,  0.155365f,   -0.350f, -0.300f,  0.217856f,
-0.350f, -0.250f,  0.288446f,   -0.350f, -0.200f,  0.364603f,   -0.350f, -0.150f,  0.442930f,   -0.350f, -0.100f,  0.519164f,
-0.350f, -0.050f,  0.588221f,   -0.350f,  0.000f,  0.644364f,   -0.350f,  0.050f,  0.681577f,   -0.350f,  0.100f,  0.694198f,
-0.350f,  0.150f,  0.677732f,   -0.350f,  0.200f,  0.629661f,   -0.350f,  0.250f,  0.550055f,   -0.350f,  0.300f,  0.441843f,
-0.350f,  0.350f,  0.310729f,   -0.350f,  0.400f,  0.164782f,   -0.350f,  0.450f,  0.013755f,   -0.350f,  0.500f, -0.131759f,
-0.300f, -0.500f,  0.077630f,   -0.300f, -0.450f,  0.115909f,   -0.300f, -0.400f,  0.164741f,   -0.300f, -0.350f,  0.223987f,
-0.300f, -0.300f,  0.292852f,   -0.300f, -0.250f,  0.369851f,   -0.300f, -0.200f,  0.452764f,   -0.300f, -0.150f,  0.538574f,
-0.300f, -0.100f,  0.623366f,   -0.300f, -0.050f,  0.702186f,   -0.300f,  0.000f,  0.768994f,   -0.300f,  0.050f,  0.816908f,
-0.300f,  0.100f,  0.838935f,   -0.300f,  0.150f,  0.829092f,   -0.300f,  0.200f,  0.783567f,   -0.300f,  0.250f,  0.701572f,
-0.300f,  0.300f,  0.585705f,   -0.300f,  0.350f,  0.441843f,   -0.300f,  0.400f,  0.278660f,   -0.300f,  0.450f,  0.106857f,
-0.300f,  0.500f, -0.061792f,   -0.250f, -0.500f,  0.108441f,   -0.250f, -0.450f,  0.149631f,   -0.250f, -0.400f,  0.200715f,
-0.250f, -0.350f,  0.261609f,   -0.250f, -0.300f,  0.331721f,   -0.250f, -0.250f,  0.409942f,   -0.250f, -0.200f,  0.494630f,
-0.250f, -0.150f,  0.583546f,   -0.250f, -0.100f,  0.673646f,   -0.250f, -0.050f,  0.760672f,   -0.250f,  0.000f,  0.838649f,
-0.250f,  0.050f,  0.899759f,   -0.250f,  0.100f,  0.935178f,   -0.250f,  0.150f,  0.936792f,   -0.250f,  0.200f,  0.899002f,
-0.250f,  0.250f,  0.819883f,   -0.250f,  0.300f,  0.701572f,   -0.250f,  0.350f,  0.550055f,   -0.250f,  0.400f,  0.374553f,
-0.250f,  0.450f,  0.186642f,   -0.250f,  0.500f, -0.000806f,   -0.200f, -0.500f,  0.119465f,   -0.200f, -0.450f,  0.159231f,
-0.200f, -0.400f,  0.207758f,   -0.200f, -0.350f,  0.265058f,   -0.200f, -0.300f,  0.330804f,   -0.200f, -0.250f,  0.404372f,
-0.200f, -0.200f,  0.484911f,   -0.200f, -0.150f,  0.571356f,   -0.200f, -0.100f,  0.662242f,   -0.200f, -0.050f,  0.754991f,
-0.200f,  0.000f,  0.844508f,   -0.200f,  0.050f,  0.921968f,   -0.200f,  0.100f,  0.975693f,   -0.200f,  0.150f,  0.994314f,
-0.200f,  0.200f,  0.969822f,   -0.200f,  0.250f,  0.899002f,   -0.200f,  0.300f,  0.783567f,   -0.200f,  0.350f,  0.629661f,
-0.200f,  0.400f,  0.447056f,   -0.200f,  0.450f,  0.248149f,   -0.200f,  0.500f,  0.046816f,   -0.150f, -0.500f,  0.110748f,
-0.150f, -0.450f,  0.144925f,   -0.150f, -0.400f,  0.186244f,   -0.150f, -0.350f,  0.234802f,   -0.150f, -0.300f,  0.290518f,
-0.150f, -0.250f,  0.353247f,   -0.150f, -0.200f,  0.422958f,   -0.150f, -0.150f,  0.500000f,   -0.150f, -0.100f,  0.585270f,
-0.150f, -0.050f,  0.679612f,   -0.150f,  0.000f,  0.780924f,   -0.150f,  0.050f,  0.879430f,   -0.150f,  0.100f,  0.958061f,
-0.150f,  0.150f,  1.000000f,   -0.150f,  0.200f,  0.994314f,   -0.150f,  0.250f,  0.936792f,   -0.150f,  0.300f,  0.829092f,
-0.150f,  0.350f,  0.677732f,   -0.150f,  0.400f,  0.493096f,   -0.150f,  0.450f,  0.288357f,   -0.150f,  0.500f,  0.078277f,
-0.100f, -0.500f,  0.084689f,   -0.100f, -0.450f,  0.109694f,   -0.100f, -0.400f,  0.139766f,   -0.100f, -0.350f,  0.175034f,
-0.100f, -0.300f,  0.215570f,   -0.100f, -0.250f,  0.261532f,   -0.100f, -0.200f,  0.313451f,   -0.100f, -0.150f,  0.372791f,
-0.100f, -0.100f,  0.443021f,   -0.100f, -0.050f,  0.530972f,   -0.100f,  0.000f,  0.643909f,   -0.100f,  0.050f,  0.772534f,
-0.100f,  0.100f,  0.886042f,   -0.100f,  0.150f,  0.958061f,   -0.100f,  0.200f,  0.975693f,   -0.100f,  0.250f,  0.935178f,
-0.100f,  0.300f,  0.838935f,   -0.100f,  0.350f,  0.694198f,   -0.100f,  0.400f,  0.512031f,   -0.100f,  0.450f,  0.306299f,
-0.100f,  0.500f,  0.092498f,   -0.050f, -0.500f,  0.045766f,   -0.050f, -0.450f,  0.058966f,   -0.050f, -0.400f,  0.074800f,
-0.050f, -0.350f,  0.093356f,   -0.050f, -0.300f,  0.114722f,   -0.050f, -0.250f,  0.139087f,   -0.050f, -0.200f,  0.166977f,
-0.050f, -0.150f,  0.199818f,   -0.050f, -0.100f,  0.241562f,   -0.050f, -0.050f,  0.304355f,   -0.050f,  0.000f,  0.424287f,
-0.050f,  0.050f,  0.608710f,   -0.050f,  0.100f,  0.772534f,   -0.050f,  0.150f,  0.879430f,   -0.050f,  0.200f,  0.921968f,
-0.050f,  0.250f,  0.899759f,   -0.050f,  0.300f,  0.816908f,   -0.050f,  0.350f,  0.681577f,   -0.050f,  0.400f,  0.505461f,
-0.050f,  0.450f,  0.302953f,   -0.050f,  0.500f,  0.090057f,    0.000f, -0.500f,  0.000000f,    0.000f, -0.450f,  0.000000f,
 0.000f, -0.400f,  0.000000f,    0.000f, -0.350f,  0.000000f,    0.000f, -0.300f,  0.000000f,    0.000f, -0.250f,  0.000000f,
 0.000f, -0.200f,  0.000000f,    0.000f, -0.150f,  0.000000f,    0.000f, -0.100f,  0.000000f,    0.000f, -0.050f,  0.000000f,
 0.000f,  0.000f,  0.000000f,    0.000f,  0.050f,  0.424287f,    0.000f,  0.100f,  0.643909f,    0.000f,  0.150f,  0.780924f,
 0.000f,  0.200f,  0.844508f,    0.000f,  0.250f,  0.838649f,    0.000f,  0.300f,  0.768994f,    0.000f,  0.350f,  0.644364f,
 0.000f,  0.400f,  0.476797f,    0.000f,  0.450f,  0.280922f,    0.000f,  0.500f,  0.072959f,    0.050f, -0.500f,  0.000000f,
 0.050f, -0.450f,  0.000000f,    0.050f, -0.400f,  0.000000f,    0.050f, -0.350f,  0.000000f,    0.050f, -0.300f,  0.000000f,
 0.050f, -0.250f,  0.000000f,    0.050f, -0.200f,  0.000000f,    0.050f, -0.150f,  0.000000f,    0.050f, -0.100f,  0.000000f,
 0.050f, -0.050f,  0.000000f,    0.050f,  0.000f,  0.000000f,    0.050f,  0.050f,  0.304355f,    0.050f,  0.100f,  0.530972f,
 0.050f,  0.150f,  0.679612f,    0.050f,  0.200f,  0.754991f,    0.050f,  0.250f,  0.760672f,    0.050f,  0.300f,  0.702186f,
 0.050f,  0.350f,  0.588221f,    0.050f,  0.400f,  0.430662f,    0.050f,  0.450f,  0.243987f,    0.050f,  0.500f,  0.044290f,
 0.100f, -0.500f,  0.000000f,    0.100f, -0.450f,  0.000000f,    0.100f, -0.400f,  0.000000f,    0.100f, -0.350f,  0.000000f,
 0.100f, -0.300f,  0.000000f,    0.100f, -0.250f,  0.000000f,    0.100f, -0.200f,  0.000000f,    0.100f, -0.150f,  0.000000f,
 0.100f, -0.100f,  0.000000f,    0.100f, -0.050f,  0.000000f,    0.100f,  0.000f,  0.000000f,    0.100f,  0.050f,  0.241562f,
 0.100f,  0.100f,  0.443021f,    0.100f,  0.150f,  0.585270f,    0.100f,  0.200f,  0.662242f,    0.100f,  0.250f,  0.673646f,
 0.100f,  0.300f,  0.623366f,    0.100f,  0.350f,  0.519164f,    0.100f,  0.400f,  0.372265f,    0.100f,  0.450f,  0.196606f,
 0.100f,  0.500f,  0.007809f,    0.150f, -0.500f,  0.000000f,    0.150f, -0.450f,  0.000000f,    0.150f, -0.400f,  0.000000f,
 0.150f, -0.350f,  0.000000f,    0.150f, -0.300f,  0.000000f,    0.150f, -0.250f,  0.000000f,    0.150f, -0.200f,  0.000000f,
 0.150f, -0.150f,  0.000000f,    0.150f, -0.100f,  0.000000f,    0.150f, -0.050f,  0.000000f,    0.150f,  0.000f,  0.000000f,
 0.150f,  0.050f,  0.199818f,    0.150f,  0.100f,  0.372791f,    0.150f,  0.150f,  0.500000f,    0.150f,  0.200f,  0.571356f,
 0.150f,  0.250f,  0.583546f,    0.150f,  0.300f,  0.538574f,    0.150f,  0.350f,  0.442930f,    0.150f,  0.400f,  0.306853f,
 0.150f,  0.450f,  0.143432f,    0.150f,  0.500f, -0.032471f,    0.200f, -0.500f,  0.000000f,    0.200f, -0.450f,  0.000000f,
 0.200f, -0.400f,  0.000000f,    0.200f, -0.350f,  0.000000f,    0.200f, -0.300f,  0.000000f,    0.200f, -0.250f,  0.000000f,
 0.200f, -0.200f,  0.000000f,    0.200f, -0.150f,  0.000000f,    0.200f, -0.100f,  0.000000f,    0.200f, -0.050f,  0.000000f,
 0.200f,  0.000f,  0.000000f,    0.200f,  0.050f,  0.166977f,    0.200f,  0.100f,  0.313451f,    0.200f,  0.150f,  0.422958f,
 0.200f,  0.200f,  0.484911f,    0.200f,  0.250f,  0.494630f,    0.200f,  0.300f,  0.452764f,    0.200f,  0.350f,  0.364603f,
 0.200f,  0.400f,  0.239298f,    0.200f,  0.450f,  0.088918f,    0.200f,  0.500f, -0.072649f,    0.250f, -0.500f,  0.000000f,
 0.250f, -0.450f,  0.000000f,    0.250f, -0.400f,  0.000000f,    0.250f, -0.350f,  0.000000f,    0.250f, -0.300f,  0.000000f,
 0.250f, -0.250f,  0.000000f,    0.250f, -0.200f,  0.000000f,    0.250f, -0.150f,  0.000000f,    0.250f, -0.100f,  0.000000f,
 0.250f, -0.050f,  0.000000f,    0.250f,  0.000f,  0.000000f,    0.250f,  0.050f,  0.139087f,    0.250f,  0.100f,  0.261532f,
 0.250f,  0.150f,  0.353247f,    0.250f,  0.200f,  0.404372f,    0.250f,  0.250f,  0.409942f,    0.250f,  0.300f,  0.369851f,
 0.250f,  0.350f,  0.288446f,    0.250f,  0.400f,  0.173838f,    0.250f,  0.450f,  0.037011f,    0.250f,  0.500f, -0.109246f,
 0.300f, -0.500f,  0.000000f,    0.300f, -0.450f,  0.000000f,    0.300f, -0.400f,  0.000000f,    0.300f, -0.350f,  0.000000f,
 0.300f, -0.300f,  0.000000f,    0.300f, -0.250f,  0.000000f,    0.300f, -0.200f,  0.000000f,    0.300f, -0.150f,  0.000000f,
 0.300f, -0.100f,  0.000000f,    0.300f, -0.050f,  0.000000f,    0.300f,  0.000f,  0.000000f,    0.300f,  0.050f,  0.114722f,
 0.300f,  0.100f,  0.215570f,    0.300f,  0.150f,  0.290518f,    0.300f,  0.200f,  0.330804f,    0.300f,  0.250f,  0.331721f,
 0.300f,  0.300f,  0.292852f,    0.300f,  0.350f,  0.217856f,    0.300f,  0.400f,  0.113919f,    0.300f,  0.450f, -0.009052f,
 0.300f,  0.500f, -0.139423f,    0.350f, -0.500f,  0.000000f,    0.350f, -0.450f,  0.000000f,    0.350f, -0.400f,  0.000000f,
 0.350f, -0.350f,  0.000000f,    0.350f, -0.300f,  0.000000f,    0.350f, -0.250f,  0.000000f,    0.350f, -0.200f,  0.000000f,
 0.350f, -0.150f,  0.000000f,    0.350f, -0.100f,  0.000000f,    0.350f, -0.050f,  0.000000f,    0.350f,  0.000f,  0.000000f,
 0.350f,  0.050f,  0.093356f,    0.350f,  0.100f,  0.175034f,    0.350f,  0.150f,  0.234802f,    0.350f,  0.200f,  0.265058f,
 0.350f,  0.250f,  0.261609f,    0.350f,  0.300f,  0.223987f,    0.350f,  0.350f,  0.155365f,    0.350f,  0.400f,  0.062122f,
 0.350f,  0.450f, -0.046864f,    0.350f,  0.500f, -0.161128f,    0.400f, -0.500f,  0.000000f,    0.400f, -0.450f,  0.000000f,
 0.400f, -0.400f,  0.000000f,    0.400f, -0.350f,  0.000000f,    0.400f, -0.300f,  0.000000f,    0.400f, -0.250f,  0.000000f,
 0.400f, -0.200f,  0.000000f,    0.400f, -0.150f,  0.000000f,    0.400f, -0.100f,  0.000000f,    0.400f, -0.050f,  0.000000f,
 0.400f,  0.000f,  0.000000f,    0.400f,  0.050f,  0.074800f,    0.400f,  0.100f,  0.139766f,    0.400f,  0.150f,  0.186244f,
 0.400f,  0.200f,  0.207758f,    0.400f,  0.250f,  0.200715f,    0.400f,  0.300f,  0.164741f,    0.400f,  0.350f,  0.102660f,
 0.400f,  0.400f,  0.020142f,    0.400f,  0.450f, -0.074908f,    0.400f,  0.500f, -0.173171f,    0.450f, -0.500f,  0.000000f,
 0.450f, -0.450f,  0.000000f,    0.450f, -0.400f,  0.000000f,    0.450f, -0.350f,  0.000000f,    0.450f, -0.300f,  0.000000f,
 0.450f, -0.250f,  0.000000f,    0.450f, -0.200f,  0.000000f,    0.450f, -0.150f,  0.000000f,    0.450f, -0.100f,  0.000000f,
 0.450f, -0.050f,  0.000000f,    0.450f,  0.000f,  0.000000f,    0.450f,  0.050f,  0.058966f,    0.450f,  0.100f,  0.109694f,
 0.450f,  0.150f,  0.144925f,    0.450f,  0.200f,  0.159231f,    0.450f,  0.250f,  0.149631f,    0.450f,  0.300f,  0.115909f,
 0.450f,  0.350f,  0.060619f,    0.450f,  0.400f, -0.011195f,    0.450f,  0.450f, -0.092546f,    0.450f,  0.500f, -0.175221f,
 0.500f, -0.500f,  0.000000f,    0.500f, -0.450f,  0.000000f,    0.500f, -0.400f,  0.000000f,    0.500f, -0.350f,  0.000000f,
 0.500f, -0.300f,  0.000000f,    0.500f, -0.250f,  0.000000f,    0.500f, -0.200f,  0.000000f,    0.500f, -0.150f,  0.000000f,
 0.500f, -0.100f,  0.000000f,    0.500f, -0.050f,  0.000000f,    0.500f,  0.000f,  0.000000f,    0.500f,  0.050f,  0.045766f,
 0.500f,  0.100f,  0.084689f,    0.500f,  0.150f,  0.110748f,    0.500f,  0.200f,  0.119465f,    0.500f,  0.250f,  0.108441f,
 0.500f,  0.300f,  0.077630f,    0.500f,  0.350f,  0.029369f,    0.500f,  0.400f, -0.031874f,    0.500f,  0.450f, -0.099968f,
 0.500f,  0.500f, -0.167755f
    };
    private final int vertexCount = Coords.length / COORDS_PER_VERTEX;
    private final int vertexStride = COORDS_PER_VERTEX * BYTES_PER_FLOAT; 
    private final short vertexOrder[] = {
  0,  21,  1,  22,  2,  23,  3,  24,  4,  25,  5,  26,  6,  27,  7,  28,  8,  29,  9,  30, 10,  31, 11,  32, 12,  33, 13,  34, 14,  35, 15,  36, 16,  37, 17,  38, 18,  39, 19,  40, 20,  41,  62,
 40,  61, 39,  60, 38,  59, 37,  58, 36,  57, 35,  56, 34,  55, 33,  54, 32,  53, 31,  52, 30,  51, 29,  50, 28,  49, 27,  48, 26,  47, 25,  46, 24,  45, 23,  44, 22,  43, 21,
 42,  63, 43,  64, 44,  65, 45,  66, 46,  67, 47,  68, 48,  69, 49,  70, 50,  71, 51,  72, 52,  73, 53,  74, 54,  75, 55,  76, 56,  77, 57,  78, 58,  79, 59,  80, 60,  81, 61,  82, 62,  83, 104,
 82, 103, 81, 102, 80, 101, 79, 100, 78,  99, 77,  98, 76,  97, 75,  96, 74,  95, 73,  94, 72,  93, 71,  92, 70,  91, 69,  90, 68,  89, 67,  88, 66,  87, 65,  86, 64,  85, 63,
 84, 105, 85, 106, 86, 107, 87, 108, 88, 109, 89, 110, 90, 111, 91, 112, 92, 113, 93, 114, 94, 115, 95, 116, 96, 117, 97, 118, 98, 119, 99, 120,100, 121,101, 122,102, 123,103, 124,104, 125, 146,
124, 145,123, 144,122, 143,121, 142,120, 141,119, 140,118, 139,117, 138,116, 137,115, 136,114, 135,113, 134,112, 133,111, 132,110, 131,109, 130,108, 129,107, 128,106, 127,105,
126, 147,127, 148,128, 149,129, 150,130, 151,131, 152,132, 153,133, 154,134, 155,135, 156,136, 157,137, 158,138, 159,139, 160,140, 161,141, 162,142, 163,143, 164,144, 165,145, 166,146, 167, 188,
166, 187,165, 186,164, 185,163, 184,162, 183,161, 182,160, 181,159, 180,158, 179,157, 178,156, 177,155, 176,154, 175,153, 174,152, 173,151, 172,150, 171,149, 170,148, 169,147,
168, 189,169, 190,170, 191,171, 192,172, 193,173, 194,174, 195,175, 196,176, 197,177, 198,178, 199,179, 200,180, 201,181, 202,182, 203,183, 204,184, 205,185, 206,186, 207,187, 208,188, 209, 230,
208, 229,207, 228,206, 227,205, 226,204, 225,203, 224,202, 223,201, 222,200, 221,199, 220,198, 219,197, 218,196, 217,195, 216,194, 215,193, 214,192, 213,191, 212,190, 211,189,
210, 231,211, 232,212, 233,213, 234,214, 235,215, 236,216, 237,217, 238,218, 239,219, 240,220, 241,221, 242,222, 243,223, 244,224, 245,225, 246,226, 247,227, 248,228, 249,229, 250,230, 251, 272,
250, 271,249, 270,248, 269,247, 268,246, 267,245, 266,244, 265,243, 264,242, 263,241, 262,240, 261,239, 260,238, 259,237, 258,236, 257,235, 256,234, 255,233, 254,232, 253,231,
252, 273,253, 274,254, 275,255, 276,256, 277,257, 278,258, 279,259, 280,260, 281,261, 282,262, 283,263, 284,264, 285,265, 286,266, 287,267, 288,268, 289,269, 290,270, 291,271, 292,272, 293, 314,
292, 313,291, 312,290, 311,289, 310,288, 309,287, 308,286, 307,285, 306,284, 305,283, 304,282, 303,281, 302,280, 301,279, 300,278, 299,277, 298,276, 297,275, 296,274, 295,273,
294, 315,295, 316,296, 317,297, 318,298, 319,299, 320,300, 321,301, 322,302, 323,303, 324,304, 325,305, 326,306, 327,307, 328,308, 329,309, 330,310, 331,311, 332,312, 333,313, 334,314, 335, 356,
334, 355,333, 354,332, 353,331, 352,330, 351,329, 350,328, 349,327, 348,326, 347,325, 346,324, 345,323, 344,322, 343,321, 342,320, 341,319, 340,318, 339,317, 338,316, 337,315,
336, 357,337, 358,338, 359,339, 360,340, 361,341, 362,342, 363,343, 364,344, 365,345, 366,346, 367,347, 368,348, 369,349, 370,350, 371,351, 372,352, 373,353, 374,354, 375,355, 376,356, 377, 398,
376, 397,375, 396,374, 395,373, 394,372, 393,371, 392,370, 391,369, 390,368, 389,367, 388,366, 387,365, 386,364, 385,363, 384,362, 383,361, 382,360, 381,359, 380,358, 379,357,
378, 399,379, 400,380, 401,381, 402,382, 403,383, 404,384, 405,385, 406,386, 407,387, 408,388, 409,389, 410,390, 411,391, 412,392, 413,393, 414,394, 415,395, 416,396, 417,397, 418,398, 419, 440
    };

    
    /**
     * Sets up the drawing object data for use in an OpenGL ES context.
     */
    public Membrane() {
        // initialize vertex byte buffer for shape coordinates
        ByteBuffer bb = ByteBuffer.allocateDirect(
        // (# of coordinate values * 4 bytes per float)
                Coords.length * 4);
        bb.order(ByteOrder.nativeOrder());
        vertexBuffer = bb.asFloatBuffer();
        vertexBuffer.put(Coords);
        vertexBuffer.position(0);

        // initialize byte buffer for the draw list
        ByteBuffer dlb = ByteBuffer.allocateDirect(
                // (# of coordinate values * 2 bytes per short)
                vertexOrder.length * 2);
        dlb.order(ByteOrder.nativeOrder());
        drawListBuffer = dlb.asShortBuffer();
        drawListBuffer.put(vertexOrder);
        drawListBuffer.position(0);
        
        // compile shaders and OpenGL program
        int vertexShader = MyRenderer.compileShader(
                GLES20.GL_VERTEX_SHADER,
                vertexShaderCode);
        int fragmentShader = MyRenderer.compileShader(
                GLES20.GL_FRAGMENT_SHADER,
                fragmentShaderCode);

        mProgram = GLES20.glCreateProgram();             // create empty OpenGL Program
        GLES20.glAttachShader(mProgram, vertexShader);   // add the vertex shader to program
        GLES20.glAttachShader(mProgram, fragmentShader); // add the fragment shader to program
        GLES20.glLinkProgram(mProgram);                  // create OpenGL program executables
    }

    /**
     * Encapsulates the OpenGL ES instructions for drawing this shape.
     *
     * @param mvpMatrix - The Model View Project matrix in which to draw
     * this shape.
     */
    public void draw(float[] mvpMatrix) {
        // Add program to OpenGL environment
        GLES20.glUseProgram(mProgram);

        // get handle to vertex shader's vPosition member
        mPositionHandle = GLES20.glGetAttribLocation(mProgram, "vPosition");
        MyRenderer.checkGlError("vPosition");

        // Enable a handle to the triangle vertices
        GLES20.glEnableVertexAttribArray(mPositionHandle);
        MyRenderer.checkGlError("mPositionHandle");

        // Prepare the triangle coordinate data
        GLES20.glVertexAttribPointer(
                mPositionHandle, COORDS_PER_VERTEX,
                GLES20.GL_FLOAT, false,
                vertexStride, vertexBuffer);
        MyRenderer.checkGlError("glVertexAttribPointer:Pos");

        // get handle to shape's transformation matrix
        mMVPMatrixHandle = GLES20.glGetUniformLocation(mProgram, "uMVPMatrix");
        MyRenderer.checkGlError("glGetUniformLocation");

        // Apply the projection and view transformation
        GLES20.glUniformMatrix4fv(mMVPMatrixHandle, 1, false, mvpMatrix, 0);
        MyRenderer.checkGlError("glUniformMatrix4fv");

        // Draw the membrane
        GLES20.glDrawElements(
                GLES20.GL_TRIANGLE_STRIP, vertexOrder.length,
                GLES20.GL_UNSIGNED_SHORT, drawListBuffer);

        // Disable vertex array
        GLES20.glDisableVertexAttribArray(mPositionHandle);
    }

}
// LocalWords:  GL shader vec gl mediump shaders mvp shader's Attrib fv
